import { NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';

// Secret key for JWT (make sure it matches the one used for signing in the API)
const JWT_SECRET = process.env.JWT_SECRET;

// Middleware function to protect routes
export function middleware(req) {
  const { pathname } = req.nextUrl;

  // Only apply middleware to routes that start with /admin
  if (pathname.startsWith('/admin')) {
    const token = req.cookies.get('token')?.value;

    if (!token) {
      // Redirect to login page if no token is found
      return NextResponse.redirect(new URL('/admin/login', req.url));
    }

    try {
      // Verify the JWT token
      jwt.verify(token, JWT_SECRET);
    } catch (error) {
      // Redirect to login page if token verification fails
      console.error('Invalid token:', error);
      return NextResponse.redirect(new URL('/admin/login', req.url));
    }
  }

  // Continue if the token is valid
  return NextResponse.next();
}

// Export config to tell Next.js where to apply the middleware
export const config = {
  matcher: ['/admin/:path*'], // Apply to all /admin routes
};
